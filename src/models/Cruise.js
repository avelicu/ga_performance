import { interpolate, interpolate2d, interpolate3d } from './Interpolator.js';
import { Temps } from './Temps.js';

class Cruise {

    static _pa_rpm_bhp_mp = {
        0: {
            2700: { 150: 235, 140: 220, 130: 210, 120: 195, 110: 180,  90: 154 },
            2600: { 150: 245, 140: 230, 130: 217, 120: 205, 110: 190,  90: 163 },
            2400: { 150: 270, 140: 255, 130: 240, 120: 225, 110: 210,  90: 175 },
            2200: {                               120: 242, 110: 225,  90: 190 },
            2000: {                                                    90: 210 },
        },
        2000: {
            2700: { 150: 232, 140: 220, 130: 206, 120: 193, 110: 180, 90: 153 },
            2600: { 150: 244, 140: 230, 130: 216, 120: 202, 110: 188, 90: 160 },
            2400: { 150: 268, 140: 251, 130: 236, 120: 220, 110: 204, 90: 172 },
            2200: {                               120: 240, 110: 222, 90: 187 },
            2000: {                                                   90: 205 },
        },
        4000: {
            2700: { 150: 232, 140: 218, 130: 205, 120: 192, 110: 179, 90: 153 },            
            2600: { 150: 244, 140: 229, 130: 215, 120: 201, 110: 187, 90: 158 },
            2400: {           140: 249, 130: 233, 120: 217, 110: 202, 90: 171 },
            2200: {                               120: 237, 110: 220, 90: 187 },
            2000: {                                                   90: 204 },
        },                                                                
        6000: {                                                           
            2700: { 150: 231, 140: 217, 130: 204, 120: 191, 110: 178, 90: 152 },
            2600: { 150: 241, 140: 227, 130: 213, 120: 199, 110: 186, 90: 157 },
            2400: {           140: 244, 130: 228, 120: 213, 110: 198, 90: 168 },
            2200: {                               120: 236, 110: 220, 90: 183 },
            2000: {                                                   90: 204 },
        },                                                                
        8000: {                                                           
            2700: { 150: 236, 140: 217, 130: 204, 120: 190, 110: 178, 90: 151 },
            2600: {           140: 227, 130: 212, 120: 198, 110: 186, 90: 157 },
            2400: {                               120: 213, 110: 198, 90: 165 },
            2200: {                                         110: 220, 90: 182 },
            2000: {                                                   90: 203 },
        },                                                                
        10000: {                                                          
            2700: {           140: 214, 130: 202, 120: 188, 110: 176, 90: 150 },
            2600: {                               120: 198, 110: 183, 90: 156 },
            2400: {                               120: 210, 110: 195, 90: 165 },
            2200: {                                                   90: 182 },
        },                                                                
        12000: {                                                          
            2700: {                               120: 188, 110: 175, 90: 149 },
            2600: {                               120: 196, 110: 182, 90: 155 },
            2400: {                                         110: 193, 90: 164 },
            2200: {                                                   90: 180 },
        },                                                                
        14000: {                                                          
            2700: {                                         110: 173, 90: 147 },
            2600: {                                         110: 179, 90: 154 },
            2400: {                                                   90: 162 },
        },
    }
        
    static _pa_oat = {
            0: {  "15": 0, 60: 90 },
         2000: {  "-5": 0, 60: 145 },
         4000: { "-25": 0, 60: 190 },
         6000: { "-40": 0, 60: 240 },
         8000: { "-60": 0, 60: 280 },
         10000: { "-60": 50, 30: 270 },
         12000: { "-60": 100, 10: 280 },
         14000: { "-60": 150, "-10": 280 },
         16000: { "-60": 200, "-30": 280 },
    }
    
    // The full throttle cutoff is probably not correct here..
    static _weight_pp = {
        2300: {
            45: { 0: 126, 280: 142 },
            55: { 0: 139, 270: 158 },
            65: { 0: 149, 230: 166, 280: 162 },
            75: { 0: 158, 160: 171, 280: 164 },
        },
        2740: {
            45: { 0: 120, 280: 135 }, // line is curved but it's the only one - graph error?
            55: { 0: 135, 280: 152 },
            65: { 0: 146, 230: 161, 280: 158 },
            75: { 0: 155, 165: 168, 280: 158 },
        },
    }
    
    static _bhp_rpm_fuelflow = {
        150: { 2700: 12.5, 2600: 12.3, 2400: 12.0 },
        140: { 2700: 11.9, 2600: 11.7, 2400: 11.3 },
        130: { 2700: 11.2, 2600: 11.0, 2400: 10.5 },
        120: { 2700: 10.7, 2600: 10.4, 2400: 10.0, 2200: 9.8 },
        110: { 2700: 10.0, 2600:  9.8, 2400:  9.4, 2200: 9.2 },
         90: { 2700:  8.9, 2600:  8.6, 2400:  8.3, 2200: 8.0, 2000: 7.7 },
    }
    
    static getMp(pa, rpm, percentPower, oat) {
        var uncorrected_mp =
            interpolate3d(
                this._pa_rpm_bhp_mp,
                pa, rpm, this.percentPowerToBhp(percentPower));
        if (uncorrected_mp == null) {
            return null;
        }
        
        var stdtemp = Temps.getStandardTemperature(pa);
        var mpcorrection = (oat-stdtemp)*4.0/10; // 0.4" per 10 degrees difference
        return (uncorrected_mp + mpcorrection) / 10.0;
    }
    
    static getFuelFlow(pa, rpm, percentPower, oat) {
        return interpolate2d(
            this._bhp_rpm_fuelflow,
            this.percentPowerToBhp(percentPower), rpm);
    }
    
    static getTrueAirspeed(pa, rpm, percentPower, oat, weight) {
        var stage1 = interpolate2d(this._pa_oat, pa, oat);
        var stage2 = interpolate3d(this._weight_pp, weight, percentPower, stage1);
        return stage2;
    }
    
    static percentPowerToBhp(percentPower) {
        return 200.0 * (percentPower / 100.0);
    }
}

export { Cruise };